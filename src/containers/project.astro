---
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";

import { Label, Lang, useTranslations } from "../i18n";

interface Props {
  project: CollectionEntry<"projects">;
}

const CATEGORTY_TO_ICON: Record<
  CollectionEntry<"projects">["data"]["category"],
  string
> = {
  app: "lucide:layout-grid",
  browserExtension: "lucide:chrome",
  cli: "lucide:terminal",
  chatBot: "lucide:bot-message-square",
  game: "lucide:gamepad-2",
};

const CATEGORTY_TO_TITLE: Record<
  CollectionEntry<"projects">["data"]["category"],
  string
> = {
  app: "Application",
  browserExtension: "Browser Extension",
  cli: "CLI",
  chatBot: "Chat Bot",
  game: "Game",
};

const LANG_TO_ICON: Record<
  CollectionEntry<"projects">["data"]["lang"],
  string
> = {
  typescript: "simple-icons:typescript",
  golang: "simple-icons:go",
  delphi: "simple-icons:delphi",
};

const LANG_TO_TITLE: Record<
  CollectionEntry<"projects">["data"]["lang"],
  string
> = {
  typescript: "TypeScript",
  golang: "Go",
  delphi: "Delphi",
};

const PLATFORM_TO_ICON: Record<
  Exclude<CollectionEntry<"projects">["data"]["platforms"], undefined>[number],
  string
> = {
  web: "lucide:globe",
  desktop: "lucide:monitor",
};

const PLATFORM_TO_TITLE: Record<
  Exclude<CollectionEntry<"projects">["data"]["platforms"], undefined>[number],
  string
> = {
  web: "Web",
  desktop: "Desktop",
};

const STACK_TO_ICON: Record<
  Exclude<CollectionEntry<"projects">["data"]["stack"], undefined>[number],
  string
> = {
  react: "simple-icons:react",
  svelte: "simple-icons:svelte",
  nextjs: "simple-icons:nextdotjs",
  fmx: "simple-icons:embarcadero",
  websocket: "lucide:unplug",
};

const STACK_TO_TITLE: Record<
  Exclude<CollectionEntry<"projects">["data"]["stack"], undefined>[number],
  string
> = {
  react: "React",
  svelte: "Svelte",
  nextjs: "Next.js",
  fmx: "FireMonkey",
  websocket: "WebSockets",
};

const INFRA_TO_ICON: Record<
  Exclude<CollectionEntry<"projects">["data"]["infra"], undefined>[number],
  string
> = {
  githubPages: "simple-icons:github",
  notion: "simple-icons:notion",
  vercel: "simple-icons:vercel",
  docker: "simple-icons:docker",
  terraform: "simple-icons:terraform",
};

const INFRA_TO_TITLE: Record<
  Exclude<CollectionEntry<"projects">["data"]["infra"], undefined>[number],
  string
> = {
  githubPages: "GitHub Pages",
  notion: "Notion",
  vercel: "Vercel",
  docker: "Docker",
  terraform: "Terraform",
};

const { project } = Astro.props;
const { Content } = await project.render();

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);
---

<div class="rounded-xl shadow-lg p-4">
  <div class="flex gap-2 items-center py-3">
    <h2 class="text-3xl font-bold grow">{project.data.name}</h2>
    <a
      target="_blank"
      href={project.data.source}
      class="btn btn-ghost max-lg:btn-sm btn-circle"
    >
      <Icon class="size-5" name="lucide:github" />
    </a>
    {
      project.data.link && (
        <a
          target="_blank"
          href={project.data.link}
          class="btn btn-ghost max-lg:btn-sm btn-circle"
        >
          <Icon class="size-5" name="lucide:external-link" />
        </a>
      )
    }
  </div>
  <div class="grid grid-cols-4 pb-6 text-opacity-70">
    <div class="flex gap-2 items-center">
      <Icon name={CATEGORTY_TO_ICON[project.data.category]} />
      {CATEGORTY_TO_TITLE[project.data.category]}
    </div>
    <div class="flex gap-2 items-center">
      <Icon name={LANG_TO_ICON[project.data.lang]} />
      {LANG_TO_TITLE[project.data.lang]}
    </div>
  </div>

  <Content />

  <div class="grid lg:grid-cols-3 pt-6">
    {
      project.data.platforms && (
        <div>
          <p class="font-semibold">{t(Label.Platforms)}:</p>
          <div class="flex gap-6 flex-wrap pt-3">
            {project.data.platforms.map((platform) => (
              <div class="flex gap-2 items-center">
                <Icon name={PLATFORM_TO_ICON[platform]} />
                {PLATFORM_TO_TITLE[platform]}
              </div>
            ))}
          </div>
        </div>
      )
    }
    {
      project.data.stack && (
        <div>
          <p class="font-semibold">{t(Label.Stack)}:</p>
          <div class="flex gap-6 flex-wrap pt-3">
            {project.data.stack.map((stack) => (
              <div class="flex gap-2 items-center">
                <Icon name={STACK_TO_ICON[stack]} />
                {STACK_TO_TITLE[stack]}
              </div>
            ))}
          </div>
        </div>
      )
    }
    {
      project.data.infra && (
        <div>
          <p class="font-semibold">{t(Label.Infra)}:</p>
          <div class="flex gap-6 flex-wrap pt-3">
            {project.data.infra.map((infra) => (
              <div class="flex gap-2 items-center">
                <Icon name={INFRA_TO_ICON[infra]} />
                {INFRA_TO_TITLE[infra]}
              </div>
            ))}
          </div>
        </div>
      )
    }
  </div>
</div>
